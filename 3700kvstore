#!/usr/bin/env python3

import argparse
import socket
import time
import json
import select
import struct
import sys
import math
import os

BROADCAST = "FFFF"
LEADER = "leader"
CANDIDATE = "candidate"
FOLLOWER = "follower"
APPEND_ENTRIES = "appendEntries"
REQUEST_VOTES = "requestVotes"


class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = {"src": self.id, "dst": BROADCAST,
                 "leader": BROADCAST, "type": "hello"}
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

        # my spot
        self.state = FOLLOWER
        self.leader: str = BROADCAST
        self.term = 0
        self.log: dict = dict()  # key value
        self.queue: dict = dict()
        self.votes = 1
        self.voted_terms: list = list()  # what term did it vote for already

        # TODO GET RID OF THIS LATER WHEN YOU DO LEADER SELECTION
        # self.leader = "0000"
        # if self.id == "0000":
        #     self.state = "leader"
        if self.id == "0000":
            print("before request")
            time.sleep(1)
            self.requestVote()
            print("after request")

    # does the election process
    # TODO make sure the replicas reply with ok and if it already did something, reply with no
    def requestVote(self):
        self.state = CANDIDATE
    
        self.term += 1
        # TODO reset election timer
        req = {"src": self.id,
               "dst": "FFFF",
               "leader": self.leader,
               "type": REQUEST_VOTES,
               "term": self.term}
        self.votes = 1
        self.send(req)
        return

    # returns the message for the get
    def getReq(self, message) -> dict:
        key = message["key"]
        value = self.log.get(key, "")
        ok = {"src": message["dst"],
              "dst": message["src"],
              "leader": self.leader,
              "type": "ok",
              "MID": message["MID"],
              "value": value}
        return ok

    #! MID might not be in the dictionary
    # returns the message for the get
    def putReq(self, message) -> dict:
        self.log[message["key"]] = message["value"]
        ok = {"src": message["dst"],
              "dst": message["src"],
              "leader": self.leader,
              "type": "ok",
              "MID": message["MID"]}

        # updates all replicas
        #! remove this after the milestone
        self.send({"src": message["dst"], "dst": "FFFF", "leader": self.leader,
                   "type": "fail", "MID": message["MID"]})
        return ok

    def send(self, message):
        if message["type"] != "hello":
            print("Sending message '%s'" % (message,), flush=True)
        self.socket.sendto(json.dumps(message).encode(
            'utf-8'), ('localhost', self.port))  # sent as bytes

    # commands:
    def run(self):
        while True:
            data, addr = self.socket.recvfrom(65535)
            msg: str = data.decode('utf-8')
            message: dict = json.loads(msg)

            print("Received message '%s'" % (msg,), flush=True)
            # prints
            # print("Received '%s'" % (
            #     str([message["src"], message["dst"], message["leader"], message["type"],
            #         message.get("key", ""), message.get("value", ""), message["MID"]]),
            # ), flush=True)
            message_type = message["type"]

            # TODO heartbeat if leader

            # votes
            if message_type == REQUEST_VOTES and self.state == FOLLOWER:
                response = {"src": self.id,
                            "dst": message["src"],
                            "leader": self.leader}
                if not message["term"] in self.voted_terms:
                    response["type"] = "yesVote"
                    self.voted_terms.append(message["term"])
                else:
                    response["type"] = "noVote"
                self.send(response)
            # candidate
            elif message_type == "yesVote" and self.state == CANDIDATE:
                self.votes += 1
                if self.votes >= 3 and self.state != LEADER:
                    self.state = LEADER
                    self.leader = self.id
                    leader = {"src": self.id,
                              "dst": "FFFF",
                              "leader": self.leader,
                              "type": APPEND_ENTRIES,
                              "term": self.term,
                              "log": self.log}
                    self.send(leader)
                    break
                    # TODO get a response to the leader announcement where it takes in new logs?

            # commands
            # TODO Add type for "getVote", and "appendEntries"
            elif (message_type == "get" or message_type == "put") and self.state != LEADER:
                self.send({"src": message["dst"], "dst": message["src"], "leader": self.leader,
                           "type": "redirect", "MID": message["MID"]})
            elif message_type == "get" and self.state == LEADER:
                ret = self.getReq(message)
                self.send(ret)
            elif message_type == "put" and self.state == LEADER:
                ret = self.putReq(message)
                self.send(ret)
            elif message_type == APPEND_ENTRIES:
                if message["term"] >= self.term:
                    self.term = message["term"]
                    self.state = FOLLOWER
                    self.leader = message["leader"]
                    # TODO do log stuff


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str,
                        nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
